stages:
  - validate
  - plan
  - apply
  - configure
  - destroy

# List of variables
variables:
  TF_DIR: ${CI_PROJECT_DIR}       # Directory in which terraform files are kept
  TF_STATE_NAME: "default"         # Name of terraform state used in "terraform init"command
image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
before_script:
  - terraform --version
  - export GITLAB_ACCESS_TOKEN=$TOKEN
  - cd ${TF_DIR}            # To get inside the working directory
  - terraform init  --reconfigure  
  - backend-config="address=${ADDRESS}" 
  - backend-config="lock_address=${ADDRESS}/lock" -backend-config="unlock_address=${ADDRESS}/lock" -backend-config="username=yashhirulkar701" -backend-config="password=$GITLAB_ACCESS_TOKEN" 
  - backend-config="lock_method=POST" 
  - backend-config="unlock_method=DELETE" 
  - backend-config="retry_wait_min=5" 
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - rm -rf .terraform
  - terraform --version
  - terraform fmt
  - terraform init

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - tfplan

apply:
  stage: apply
  script:
    - terraform apply -auto-approve tfplan
  dependencies:
    - plan      

Deploy-to-EKS:
  image: 
    name: alpine/helm:3.12.3
    entrypoint: [""]
  stage: configure
  before_script:
    - apk add --no-cache curl python3 py3-pip
    - pip3 install awscli
    - apk update && apk add curl git
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.1/bin/linux/amd64/kubectl
    - chmod u+x kubectl && mv kubectl /bin/kubectl
  script:
    - aws eks update-kubeconfig --region us-east-1 --name EKSManish-Thesis-Cluster
    - kubectl create namespace --staging
    - kubectl run pingpong --image=registry.gitlab.com/testman5880607/pingpong-fullstack-multiplayer:latest



destroy:
  stage: destroy
  script:
    - terraform destroy -auto-approve
  when: always
  dependencies: 
    - apply